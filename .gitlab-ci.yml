stages:
  - build
  - docs
  - deploy_docs
  - test
  - dagger
  - coverage
  - deploy_coverage

.iris_common: &common_iris
  before_script:
    - echo "Setting up environment..."
    - source /auto/software/iris/setup_system.source
    - source /opt/xilinx/xrt/setup.sh
    - module load cmake
    - module load gnu

.excl_runner:
  extends: [.iris_common]
  tags: [excl]

variables:
  IRIS_INSTALL_ROOT: $CI_PROJECT_DIR/install
  IRIS_INSTALL_ROOT_WO_FFI: $CI_PROJECT_DIR/install.noffi
  IRIS_INSTALL_ROOT_W_FFI: $CI_PROJECT_DIR/install.ffi
#CONDA_ROOT: /auto/ciscratch/conda

.zenith-config: &zenith_config
  tags: [zenith]
  variables:
    IRIS_MACHINE: zenith
  before_script:
    - echo "Setting up environment..."
    - source /auto/software/iris/setup_system.source
    - source /opt/xilinx/xrt/setup.sh
    - module load cmake
    - module load gnu

.explorer-config: &explorer_config
  tags: [explorer]
  variables:
    IRIS_MACHINE: explorer
  before_script:
    - echo "Setting up environment..."
    - source /auto/software/iris/setup_system.source
    - module load cmake
    - module load gnu

.build-ffi: &build_ffi
  stage: build
  script:
    - echo "Installing iris to $CI_PROJECT_DIR/install"
    - IRIS_TAG=.ffi.$IRIS_MACHINE bash build.sh -DENABLE_FFI=ON
  artifacts:
    paths:
      - $IRIS_INSTALL_ROOT.ffi.$IRIS_MACHINE

.build-noffi: &build_noffi
  stage: build
  script:
    - echo "Installing iris to $CI_PROJECT_DIR/install"
    - IRIS_TAG=.noffi.$IRIS_MACHINE bash build.sh 
  artifacts:
    paths:
      - $IRIS_INSTALL_ROOT.noffi.$IRIS_MACHINE

build-ffi-explorer:
  # Using aliasin features
  <<: [*explorer_config, *build_ffi]

build-noffi-explorer:
  # Using aliasin features
  <<: [*explorer_config, *build_noffi]

build-ffi-zenith:
  # Using aliasin features
  <<: [*zenith_config, *build_ffi]

build-noffi-zenith:
  # Using aliasin features
  <<: [*zenith_config, *build_noffi]

docs-job:
  tags: [devdocs]
  stage: docs
  needs: []
  before_script:
#- source $CONDA_ROOT/etc/profile.d/conda.sh
#    - conda env create --force -p ./envs -f docs/sphinx/environment.yml
#    - conda activate ./envs
    - python3 -m venv sphinx_venv
    - source sphinx_venv/bin/activate
    - python3 -m pip install -e .
    - python3 -m pip install sphinx breathe numpy sphinxcontrib-contentui sphinx_rtd_theme json-schema-for-humans
    - source `python3 -c 'import iris; print(iris.path)'`/setup.source 
#    - pip install json-schema-for-humans
  script:
    - pushd docs/sphinx/source
    - python -m sphinx -T -E -b html -d _build/doctrees -D language=en . _build/html
    - popd
    - mkdir schema-docs
    - generate-schema-doc --expand-buttons schema schema-docs
  artifacts:
    paths:
      - docs/sphinx/source/_build/html
      - schema-docs

.deploy_docs_common:
  tags: [devdocs]
  stage: deploy_docs
  needs: [docs-job]
  script:
    - rsync -a --delete docs/sphinx/source/_build/html/ ~/www/brisbane/iris
    - rsync -a --delete schema-docs/ ~/www/brisbane/schema-docs

deploy_docs-job:
  extends: .deploy_docs_common
  only:
    refs:
      - ornl_main

deploy_docs_manual-job:
  extends: .deploy_docs_common
  when: manual

.test-job: &test_job
  stage: test
  allow_failure: true
  script:
#    - echo "Installing iris to $IRIS_INSTALL_ROOT"
#    - bash build-coverage.sh
    - echo $CI_REPOSITORY_URL
    - echo $CI_PROJECT_PATH
    - echo $IRIS_MACHINE
    - echo $IRIS_TAG
    - echo $IRIS_INSTALL_ROOT.$IRIS_TAG.$IRIS_MACHINE
    - ls $IRIS_INSTALL_ROOT.$IRIS_TAG.$IRIS_MACHINE
    - source $IRIS_INSTALL_ROOT.$IRIS_TAG.$IRIS_MACHINE/setup.source
    - echo $PATH
    - echo $LD_LIBRARY_PATH
    - echo $HIP_ROOT
    - echo $IRIS_ARCHS
    - echo $IRIS_ASYNC
    - echo $IRIS_TAG
    - echo $IRIS_MACHINE
    - echo "Test: tests-$IRIS_ARCHS-$IRIS_ASYNC-$IRIS_TAG-$IRIS_MACHINE"
    - cp -r tests tests-$IRIS_ARCHS-$IRIS_ASYNC-$IRIS_TAG-$IRIS_MACHINE
    - cd tests-$IRIS_ARCHS-$IRIS_ASYNC-$IRIS_TAG-$IRIS_MACHINE
    - mkdir build
    - cd build
    - cmake .. -DIRIS=$IRIS
    - make --ignore-errors
    - echo IRIS_ARCHS is $IRIS_ARCHS
    - ctest --output-junit testRes.xml
    - cd ../..
    - python3 -m venv .venv-schema
    - source .venv-schema/bin/activate
    - pip install jsoncomment jsonschema
    - bash .gitlab-ci-scripts/schema_check.sh
  after_script:
    - python3 -m venv .venv-gcovr
    - source .venv-gcovr/bin/activate
    - echo $IRIS_ARCHS
    - echo $IRIS_ASYNC
    - pip install gcovr
    - gcovr --xml-pretty --exclude-unreachable-branches --print-summary -o coverage.xml --gcov-ignore-parse-errors --json ${CI_JOB_NAME}-coverage.json --html-details coverage.html
  coverage: /^\s*lines:\s*\d+.\d+\%/
  artifacts:
    name: "$CI_JOB_NAME"
    when: always
    paths:
      - tests-$IRIS_ARCHS-$IRIS_ASYNC-$IRIS_TAG-$IRIS_MACHINE/build/Testing/Temporary/LastTest.log
      - tests-$IRIS_ARCHS-$IRIS_ASYNC-$IRIS_TAG-$IRIS_MACHINE/build/testRes.xml
      - ${CI_JOB_NAME}-coverage.json
      - coverage.xml
      - coverage*.html
      - coverage.css
    reports:
      junit: tests-$IRIS_ARCHS-$IRIS_ASYNC-$IRIS_TAG-$IRIS_MACHINE/build/testRes.xml
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml

test-job-zenith-all:
  needs: [build-noffi-zenith]
  <<: [*zenith_config, *test_job]
  variables:
    IRIS_MACHINE: zenith
    IRIS_TAG: noffi
    IRIS_ARCHS: cuda,hip,openmp,opencl

test-job-zenith-cuda:
  needs: [build-noffi-zenith]
  <<: [*zenith_config, *test_job]
  variables:
    IRIS_MACHINE: zenith
    IRIS_TAG: noffi
    IRIS_ARCHS: cuda

test-job-zenith-hip:
  needs: [build-noffi-zenith]
  <<: [*zenith_config, *test_job]
  variables:
    IRIS_MACHINE: zenith
    IRIS_TAG: noffi
    IRIS_ARCHS: hip

test-job-zenith-openmp:
  needs: [build-noffi-zenith]
  <<: [*zenith_config, *test_job]
  variables:
    IRIS_MACHINE: zenith
    IRIS_TAG: noffi
    IRIS_ARCHS: openmp

test-job-zenith-opencl:
  needs: [build-noffi-zenith]
  <<: [*zenith_config, *test_job]
  variables:
    IRIS_MACHINE: zenith
    IRIS_TAG: noffi
    IRIS_ARCHS: opencl

test-job-explorer:
  needs: [build-noffi-explorer]
  <<: [*explorer_config, *test_job]
  variables:
    IRIS_MACHINE: explorer
    IRIS_TAG: noffi
    IRIS_ARCHS: hip,openmp,opencl

test-job-zenith-all-async-s2k:
  needs: [build-noffi-zenith]
  <<: [*zenith_config, *test_job]
  variables:
    IRIS_MACHINE: zenith
    IRIS_TAG: noffi
    IRIS_ARCHS: cuda,hip,openmp,opencl
    IRIS_ASYNC: 1

test-job-zenith-cuda-async-s2k:
  needs: [build-noffi-zenith]
  <<: [*zenith_config, *test_job]
  variables:
    IRIS_MACHINE: zenith
    IRIS_TAG: noffi
    IRIS_ARCHS: cude
    IRIS_ASYNC: 1

test-job-zenith-hip-async-s2k:
  needs: [build-noffi-zenith]
  <<: [*zenith_config, *test_job]
  variables:
    IRIS_MACHINE: zenith
    IRIS_TAG: noffi
    IRIS_ARCHS: hip
    IRIS_ASYNC: 1

test-job-zenith-openmp-async-s2k:
  needs: [build-noffi-zenith]
  <<: [*zenith_config, *test_job]
  variables:
    IRIS_MACHINE: zenith
    IRIS_TAG: noffi
    IRIS_ARCHS: openmp
    IRIS_ASYNC: 1

test-job-zenith-opencl-async-s2k:
  needs: [build-noffi-zenith]
  <<: [*zenith_config, *test_job]
  variables:
    IRIS_MACHINE: zenith
    IRIS_TAG: noffi
    IRIS_ARCHS: opencl
    IRIS_ASYNC: 1

test-job-explorer-async-s2k:
  needs: [build-noffi-explorer]
  <<: [*explorer_config, *test_job]
  variables:
    IRIS_MACHINE: explorer
    IRIS_TAG: noffi
    IRIS_ARCHS: hip,openmp,opencl
    IRIS_ASYNC: 1

test-job-zenith-all-ffi-async-s2k:
  needs: [build-noffi-zenith]
  <<: [*zenith_config, *test_job]
  variables:
    IRIS_MACHINE: zenith
    IRIS_TAG: ffi
    IRIS_ARCHS: cuda,hip,openmp,opencl
    IRIS_ASYNC: 1

.test-backend: &test_backend
  stage: test
  allow_failure: true
  script:
#    - echo "Installing iris to $IRIS_INSTALL_ROOT"
#    - bash build-coverage.sh
    - echo $CI_REPOSITORY_URL
    - echo $CI_PROJECT_PATH
    - source $IRIS_INSTALL_ROOT.noffi.$IRIS_MACHINE/setup.source
    - echo $PATH
    - echo $LD_LIBRARY_PATH
    - echo $HIP_ROOT
    - echo $IRIS_TESTNAME
    - echo $IRIS_TAG
    - echo $IRIS_ARCHS
    - echo $IRIS_MACHINE
    - echo $IRIS_ASYNC
    - echo "Test: tests-$IRIS_ARCHS-$IRIS_ASYNC-$IRIS_TAG-$IRIS_MACHINE$IRIS_TESTNAME"
    - cp -r tests tests-$IRIS_ARCHS-$IRIS_ASYNC-$IRIS_TAG-$IRIS_MACHINE$IRIS_TESTNAME
    - cd tests-$IRIS_ARCHS-$IRIS_ASYNC-$IRIS_TAG-$IRIS_MACHINE$IRIS_TESTNAME
    - echo "Test backends for test 29"
    - cd $IRIS_TESTNAME
    - bash test_backends.sh
  after_script:
    - python3 -m venv .venv
    - source .venv/bin/activate
    - pip install gcovr
    - gcovr --xml-pretty --exclude-unreachable-branches --print-summary -o coverage.xml --gcov-ignore-parse-errors --json ${CI_JOB_NAME}-coverage.json --html-details coverage.html
  coverage: /^\s*lines:\s*\d+.\d+\%/
  artifacts:
    name: "$CI_JOB_NAME"
    when: always
    paths:
      - ${CI_JOB_NAME}-coverage.json
      - coverage.xml
      - coverage*.html
      - coverage.css
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml


# test-job-leconte:
#   extends: .test-job
#   tags: [leconte]

test-backends-29:
  needs: [build-noffi-zenith]
  <<: [*zenith_config, *test_backend]
  variables:
    IRIS_MACHINE: zenith
    IRIS_TAG: noffi
    IRIS_ARCHS: cuda,hip,openmp,opencl
    IRIS_TESTNAME: 29_data_mem

test-backends-34:
  needs: [build-noffi-zenith]
  <<: [*zenith_config, *test_backend]
  variables:
    IRIS_MACHINE: zenith
    IRIS_TAG: noffi
    IRIS_ARCHS: cuda,hip,openmp,opencl
    IRIS_TESTNAME: 34_set_mem

# test-job-leconte:
#   extends: .test-job
#   tags: [leconte]

test-backends-29-async-s2k:
  needs: [build-noffi-zenith]
  <<: [*zenith_config, *test_backend]
  variables:
    IRIS_MACHINE: zenith
    IRIS_TAG: noffi
    IRIS_ARCHS: cuda,hip,openmp,opencl
    IRIS_ASYNC: 1
    IRIS_TESTNAME: 29_data_mem

test-backends-34-async-s2k:
  needs: [build-noffi-zenith]
  <<: [*zenith_config, *test_backend]
  variables:
    IRIS_MACHINE: zenith
    IRIS_TAG: noffi
    IRIS_ARCHS: cuda,hip,openmp,opencl
    IRIS_ASYNC: 1
    IRIS_TESTNAME: 34_set_mem

test-backends-37:
  needs: [build-noffi-zenith]
  <<: [*zenith_config, *test_backend]
  variables:
    IRIS_MACHINE: zenith
    IRIS_TAG: noffi
    IRIS_ARCHS: cuda,hip,openmp,opencl
    IRIS_TESTNAME: 37_opencl_icd

.dagger:
  stage: dagger
  resource_group: slurm_zenith
  needs: [build-noffi-zenith]
  before_script:
    - module load cmake
    - module load gnu

.dagger-zenith-run-policy-evaluations:
  extends: [.dagger]
  script:
    - source /auto/software/iris/setup_system.source
#    - echo "Installing iris to $IRIS_INSTALL_ROOT"
#- bash build-coverage.sh
    - source $IRIS_INSTALL_ROOT.noffi.$IRIS_MACHINE/setup.source
    - .gitlab-ci-scripts/runner_watcher.sh $$ &
    - sbatch --partition=gpu --nodelist=zenith .gitlab-ci-scripts/slurm-dagger-run-policy-evaluations.sh
    - python3 -u .gitlab-ci-scripts/slurm-tee.py slurm-test-err.txt slurm-test-out.txt
    - echo "Errors $(wc -l apps/dagger/errors.txt)"
    - cat apps/dagger/errors.txt
    - if [ -s apps/dagger/errors.txt ]; then exit 1; fi
  artifacts:
    when: always
    paths:
      - apps/dagger/test-out.txt 
      - apps/dagger/errors.txt 
      - apps/dagger/dagger-payloads
      - apps/dagger/dagger-graphs
      - apps/dagger/dagger-results
      - slurm*.txt

dagger-zenith-run-policy-evaluations-synchronous-explicit-data-transfers:
  extends: [.dagger-zenith-run-policy-evaluations]

dagger-zenith-run-policy-evaluations-synchronous-dmem:
  extends: [.dagger-zenith-run-policy-evaluations]
  variables:
    USE_DATA_MEMORY: --use-data-memory

dagger-zenith-run-policy-evaluations-asynchronous-explicit-data-transfers:
  extends: [.dagger-zenith-run-policy-evaluations]
  variables:
    IRIS_ASYNC: 1

dagger-zenith-run-policy-evaluations-asynchronous-dmem:
  extends: [.dagger-zenith-run-policy-evaluations]
  variables:
    IRIS_ASYNC: 1
    USE_DATA_MEMORY: --use-data-memory

dagger-zenith-test-correctness:
  extends: [.dagger]
  script:
    - source /auto/software/iris/setup_system.source
#    - echo "Installing iris to $IRIS_INSTALL_ROOT"
#- bash build-coverage.sh
    - source $IRIS_INSTALL_ROOT.noffi.$IRIS_MACHINE/setup.source
    - .gitlab-ci-scripts/runner_watcher.sh $$ &
    - sbatch --partition=gpu --nodelist=zenith .gitlab-ci-scripts/slurm-dagger-test-correctness.sh
    - python3 -u .gitlab-ci-scripts/slurm-tee.py slurm-test-err.txt slurm-test-out.txt
    - echo "Errors $(wc -l apps/dagger/errors.txt)"
    - cat apps/dagger/errors.txt
    - if [ -s apps/dagger/errors.txt ]; then exit 1; fi
  artifacts:
    when: always
    paths:
      - apps/dagger/test-out.txt 
      - apps/dagger/errors.txt 
      - slurm*.txt

.dagger-zenith-test-local-workgroup-sizes:
  extends: [.dagger]
  script:
    - source /auto/software/iris/setup_system.source
#    - echo "Installing iris to $IRIS_INSTALL_ROOT"
#- bash build-coverage.sh
    - source $IRIS_INSTALL_ROOT.noffi.$IRIS_MACHINE/setup.source
    - .gitlab-ci-scripts/runner_watcher.sh $$ &
    - sbatch --partition=gpu --nodelist=zenith .gitlab-ci-scripts/slurm-dagger-test-local-workgroup-sizes.sh
    - python3 -u .gitlab-ci-scripts/slurm-tee.py slurm-test-err.txt slurm-test-out.txt
    - echo "Errors $(wc -l apps/dagger/errors.txt)"
    - cat apps/dagger/errors.txt
    - if [ -s apps/dagger/errors.txt ]; then exit 1; fi
  artifacts:
    when: always
    paths:
      - apps/dagger/test-out.txt 
      - apps/dagger/errors.txt 
      - apps/dagger/dagger-payloads
      - apps/dagger/dagger-graphs
      - apps/dagger/dagger-results
      - slurm*.txt

dagger-zenith-test-local-workgroup-sizes-synchronous-explicit-data-transfers:
  extends: [.dagger-zenith-test-local-workgroup-sizes]
  variables:
    REPEATS: 1

dagger-zenith-test-local-workgroup-sizes-synchronous-dmem:
  extends: [.dagger-zenith-test-local-workgroup-sizes]
  variables:
    REPEATS: 1
    USE_DATA_MEMORY: --use-data-memory

dagger-zenith-test-local-workgroup-sizes-asynchronous-explicit-data-transfers:
  extends: [.dagger-zenith-test-local-workgroup-sizes]
  variables:
    REPEATS: 1
    IRIS_ASYNC: 1

dagger-zenith-test-local-workgroup-sizes-asynchronous-dmem:
  extends: [.dagger-zenith-test-local-workgroup-sizes]
  variables:
    REPEATS: 1
    IRIS_ASYNC: 1
    USE_DATA_MEMORY: --use-data-memory

coverage-collect:
  tags: [zenith]
  stage: coverage
  variables:
    IRIS_MACHINE: zenith
  needs:
    - test-job-zenith-all
    - test-job-zenith-cuda
    - test-job-zenith-hip
    - test-job-zenith-openmp
    - test-job-zenith-opencl
    - test-job-explorer
    - test-job-zenith-all-async-s2k
    - test-job-zenith-cuda-async-s2k
    - test-job-zenith-hip-async-s2k
    - test-job-zenith-openmp-async-s2k
    - test-job-zenith-opencl-async-s2k
    - test-job-explorer-async-s2k
    - test-backends-29
    - test-backends-34
    - test-backends-37
    - test-backends-29-async-s2k
    - test-backends-34-async-s2k
  before_script:
    - source /auto/software/iris/setup_system.source
  script:
#    - echo "Installing iris to $IRIS_INSTALL_ROOT"
#- bash build-coverage.sh
    - source $IRIS_INSTALL_ROOT.noffi.$IRIS_MACHINE/setup.source
    - python3 -m venv .venv
    - source .venv/bin/activate
    - pip install gcovr
    - gcovr --xml-pretty --exclude-unreachable-branches --print-summary -o coverage.xml --gcov-ignore-parse-errors --json ${CI_JOB_NAME}-coverage.json --html-details coverage.html -a '*coverage.json'
  coverage: /^\s*lines:\s*\d+.\d+\%/
  artifacts:
    name: "$CI_JOB_NAME"
    when: always
    paths:
      - ${CI_JOB_NAME}-coverage.json
      - coverage.xml
      - coverage*.html
      - coverage.css
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml

.deploy_coverage_common:
  tags: [devdocs]
  stage: deploy_coverage
  needs: [coverage-collect]
  script:
    rsync -a --delete *.html *.css ~/www/brisbane/iris-coverage

deploy_coverage-job:
  extends: .deploy_coverage_common
  only:
    refs:
      - ornl_main

deploy_coverage_manual-job:
  extends: .deploy_coverage_common
  when: manual
